#!/usr/bin/env bash

VERSION=0.2.1

set -e

is_initialized=0

LOCAL_ENV=.env.local

# Find source directory
SOURCE="${BASH_SOURCE[0]}"
while [ -L "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
BRUTILS_DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

source "$BRUTILS_DIR/lib/styles.sh"
source "$BRUTILS_DIR/lib/utils.sh"

if [ -f .brutilsrc ]; then
  source .brutilsrc
  is_initialized=1
fi

COMMAND=$1
shift

add_local_repo() {
  REPO_TYPE=$1 # plugin or theme
  REPO_NAME=$2 # name of repo
  VENDOR=$3 # name of plugin/theme vendor, optional
  if [ -z "$VENDOR" ] && [[ -n "$DEFAULT_VENDOR" ]]; then
    VENDOR=$DEFAULT_VENDOR
  fi

  if [ -z "$REPO_TYPE" ] || [ -z "$REPO_NAME" ] || [ -z "$VENDOR" ]; then
    echo -e "${YELLOW_BG}‚ùå Usage: brutils add-local-repo <plugin|theme> <repo-name> [<vendor>]${ENDSTYLE}"
    return 1
  fi

  source "$LOCAL_ENV"

  if [[ "$REPO_TYPE" == "theme" ]]; then
    LOCAL_REPO_PATH="${THEMES_PATH}/${REPO_NAME}"
  elif [[ "$REPO_TYPE" == "plugin" ]]; then
    LOCAL_REPO_PATH="${PLUGINS_PATH}/${REPO_NAME}"
  fi

  REPO_PATH="/opt/${REPO_TYPE}s/${REPO_NAME}"
  PACKAGE_NAME="$VENDOR/$REPO_NAME"

  if ! [ -d $LOCAL_REPO_PATH ]; then
    echo -e "${YELLOW_BG}‚ùå $PACKAGE_NAME not found at $REPO_PATH. Check name and type of repo and try again.${ENDSTYLE}"
    return 1
  fi

  add_local_composer

  echo -e "üì¶ Adding local $REPO_TYPE ${GREEN}$REPO_NAME${ENDSTYLE} to composer.local.json..."
  REPO_OPTIONS="{ \"type\": \"path\", \"url\": \"$REPO_PATH\", \"options\": { \"symlink\": true } }"
  docker compose --env-file "$LOCAL_ENV" run --rm -e PACKAGE_NAME="$PACKAGE_NAME" composer sh -c ' \
    jq --arg package_name "$PACKAGE_NAME" \
    "del(.repositories[] | select( has(\"url\") and (.url | contains(\$package_name)) ) )" \
    composer.local.json > composer.local.tmp.json &&  \
    mv composer.local.tmp.json composer.local.json'
  docker compose --env-file "$LOCAL_ENV" run --rm -e COMPOSER=composer.local.json composer \
    config "repositories.$REPO_NAME" "$REPO_OPTIONS"
  docker compose --env-file "$LOCAL_ENV" run --rm -e COMPOSER=composer.local.json composer \
    remove "${PACKAGE_NAME}"
  docker compose --env-file "$LOCAL_ENV" run --rm -e COMPOSER=composer.local.json composer \
    require "${PACKAGE_NAME}:*"
}

update_main_composer_dependencies() {
  PACKAGE=$1
  if [ -z "$PACKAGE" ]; then
    echo -e "${BOLD}üì¶ Updating dependencies from composer.json...${ENDSTYLE}"
    docker compose --env-file "$LOCAL_ENV" run --rm composer update
    return 1
  fi

  if [[ ! "$PACKAGE" =~ ^[^/]+/[^/]+$ ]]; then
    echo -e "${YELLOW_BG}‚ùå Invalid dependency format. Use vendor/package.${ENDSTYLE}"
    return 1
  fi

  echo "Updating ${PACKAGE}..."
    docker compose --env-file "$LOCAL_ENV" run --rm composer update "$PACKAGE"
}

show_help() {
  echo -e "${BOLD}üß∞ brutils - Bedrock Utility CLI${ENDSTYLE}"
  echo    ""
  echo -e "${BOLD}Usage:${ENDSTYLE} brutils ${BOLD}<command>${ENDSTYLE} [${ITALICS}options${ENDSTYLE}]"
  echo    ""
  show_help_commands
}

# Commands
case "$COMMAND" in
  init|-i)
    if [ -f .brutilsrc ]; then
      echo -e "${YELLOW_BG}‚ùå Project already configured. Exiting.${ENDSTYLE}"
      exit 1
    fi
    check_if_bedrock_config
    echo "COMPOSER=composer.json" > .brutilsrc
    default_config_name=$(get_config_name)
    echo -e "Enter the Bedrock configuration name (or press Enter for default): ${GRAY}${default_config_name}${ENDSTYLE}"
    read user_entered_config_name
    if [[ -z "$user_entered_config_name" ]]; then
      update_var_in_brutilsrc CONFIG_NAME "$default_config_name"
    else
      update_var_in_brutilsrc CONFIG_NAME "$user_entered_config_name"
    fi
    echo "Enter your default vendor name (or press Enter to leave blank):"
    read default_vendor_name
    if [[ "$default_vendor_name" ]]; then
      update_var_in_brutilsrc DEFAULT_VENDOR "$default_vendor_name"
    fi
    is_initialized=1
    echo -e "${GREEN_BG}‚úÖ .brutilsrc added to project directory. Please add to your .gitignore file.${ENDSTYLE}"
    copy_composer_dockerfile
    add_local_env
    if cat "$LOCAL_ENV" | grep -qE 'THEMES_PATH|PLUGINS_PATH'; then
      echo -e "${YELLOW}‚ö†Ô∏è THEMES_PATH and PLUGINS_PATH variables already added to .env.local. Skipping ...${ENDSTYLE}"
    else
       echo -e "${BOLD}‚öôÔ∏è Adding path variables to .env.local ...${ENDSTYLE}"
      add_path_variables >/dev/null
    fi
    add_docker_config_override
    show_last_init_steps
    ;;
  start)
    check_if_init
    if [ -n "$(docker ps -q --filter "name=bedrock")" ]; then
      echo "üõë Stopping other running Bedrock containers (if any)..."
      docker container stop $(docker ps -q --filter "name=bedrock") 2>/dev/null
    fi
    echo "üü¢ Starting $(get_config_name) and cleaning up orphans..."
    docker compose --env-file "$LOCAL_ENV" up -d --remove-orphans
    echo "‚úÖ Done!"
    ;;
  stop)
    check_if_init
    echo "üõë Stopping $(get_config_name)..."
    docker compose --env-file "$LOCAL_ENV" down --remove-orphans
    echo "$(get_config_name) stopped."
    ;;
  rebuild)
    check_if_init
    if [[ "$1" == "--full" ]]; then
      echo "üîÅ Forcing full rebuild of $(get_config_name)..."
      docker compose --env-file "$LOCAL_ENV" down --volumes --remove-orphans
      docker compose --env-file "$LOCAL_ENV" build --no-cache
      docker compose --env-file "$LOCAL_ENV" up -d
    else
      echo "üîÅ Rebuilding $(get_config_name)..."
      docker compose --env-file "$LOCAL_ENV" down --remove-orphans
      docker compose --env-file "$LOCAL_ENV" up -d --build
    fi
    echo "‚úÖ Done!"
    ;;
  cleanup)
    check_if_init
    echo "üßπ Removing all orphaned Composer containers..."
    docker container rm $(docker ps -q --filter "name=composer" --filter "status=exited")
    echo "‚úÖ Done!"
    ;;
  install-local)
    check_if_init
    add_local_composer
    echo "Running local install with composer.local.json..."
    docker compose --env-file "$LOCAL_ENV" run --rm -e COMPOSER=composer.local.json composer install
    update_var_in_brutilsrc COMPOSER composer.local.json
    ;;
  use-local|update-local)
    check_if_init
    echo "Switching to composer.local.json and updating dependencies..."
    docker compose --env-file "$LOCAL_ENV" run --rm -e COMPOSER=composer.local.json composer update
    update_var_in_brutilsrc COMPOSER composer.local.json
    ;;
  add-local-repo)
    check_if_init
    add_local_repo "$@"
    update_var_in_brutilsrc COMPOSER composer.local.json
    ;;
  install)
    check_if_init
    echo "Installing dependencies from composer.json..."
    docker compose --env-file "$LOCAL_ENV" run --rm composer install
    update_var_in_brutilsrc COMPOSER composer.json
    ;;
  update|update-main|use-main)
    check_if_init
    update_main_composer_dependencies "$@"
    update_var_in_brutilsrc COMPOSER composer.json
    ;;
  add-paths)
    check_if_init
    add_path_variables
    ;;
  check-paths)
    check_if_init
    echo "Finding theme and plugin paths..."
    docker compose --env-file "$LOCAL_ENV" config | grep -m 2 -E 'THEMES_PATH|PLUGINS_PATH' \
    || echo -e "${YELLOW_BG}‚ùå Paths not found. Please set THEMES_PATH and PLUGINS_PATH in your .env file.${ENDSTYLE}"
    ;;
  which)
    check_if_init
    echo -e "üì¶ Using composer file: ${CYAN}$COMPOSER${ENDSTYLE}"
    ;;
  help|-h|--help)
    show_help
    ;;
  -v|--version)
    echo $VERSION
    ;;
  *)
    echo -e "${YELLOW_BG}‚ùå Unknown command: $COMMAND${ENDSTYLE}"
    echo ""
    echo -e "${BOLD}Usage:${ENDSTYLE} brutils ${BOLD}<command>${ENDSTYLE} [${ITALICS}options${ENDSTYLE}]"
    echo ""
    show_help_commands
    exit 1
    ;;
  esac